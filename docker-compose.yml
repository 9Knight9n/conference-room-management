version: "3.9"

services:
  django:
    build:
      dockerfile: docker/django/Dockerfile
      target: django_with_entrypoint
      args:
        - PYTHONDONTWRITEBYTECODE=${PYTHONDONTWRITEBYTECODE}
    command: python manage.py runserver 0.0.0.0:8000
    environment:
      - POSTGRES_HOST=postgresql
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=${DEBUG}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
    volumes:
      - ./django:/code
    ports:
      - "${DJANGO_PORT}:8000"
    depends_on:
      - celery


  postgresql:
    image: public.ecr.aws/docker/library/postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}


  reactjs:
    build:
      dockerfile: ./docker/reactjs/Dockerfile
    command: npm start
#    command: serve -s build
    volumes:
      - ./reactjs:/code
      - /code/node_modules
    ports:
      - "${REACTJS_PORT}:3000"
    environment:
      - CHOKIDAR_USEPOLLING=true
      - NODE_ENV=${NODE_ENV}
      - WATCHPACK_POLLING=true
    depends_on:
      - django

  redis:
    image: public.ecr.aws/docker/library/redis:7-alpine

  celery:
    build:
      dockerfile: docker/django/Dockerfile
      target: django
      args:
        - PYTHONDONTWRITEBYTECODE=${PYTHONDONTWRITEBYTECODE}
    command: celery -A core worker -l info
    environment:
      - POSTGRES_HOST=postgresql
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=${DEBUG}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
    volumes:
      - ./django:/code
    depends_on:
      - redis
      - postgresql

volumes:
  postgres_data: